// <auto-generated />
using System;
using EventsProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsProject2.Migrations
{
    [DbContext(typeof(EventsProjectContext))]
    partial class EventsProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsProject.EventType", b =>
                {
                    b.Property<string>("EventTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("EventsProject.Music", b =>
                {
                    b.Property<string>("MusicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MusicId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("EventsProject.MusicEvent", b =>
                {
                    b.Property<int>("MusicEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MusicId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.Property<string>("VenueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("MusicEventId");

                    b.HasIndex("MusicId");

                    b.HasIndex("VenueId");

                    b.ToTable("MusicEvents");
                });

            modelBuilder.Entity("EventsProject.Sport", b =>
                {
                    b.Property<string>("SportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SportName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("EventsProject.SportEvent", b =>
                {
                    b.Property<int>("SportEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fixture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TicketsSold")
                        .HasColumnType("int");

                    b.Property<string>("VenueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("dateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SportEventId");

                    b.HasIndex("SportId");

                    b.HasIndex("VenueId");

                    b.ToTable("SportEvents");
                });

            modelBuilder.Entity("EventsProject.Venue", b =>
                {
                    b.Property<string>("VenueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VenueName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VenueId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("EventsProject.Music", b =>
                {
                    b.HasOne("EventsProject.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");
                });

            modelBuilder.Entity("EventsProject.MusicEvent", b =>
                {
                    b.HasOne("EventsProject.Music", "Music")
                        .WithMany()
                        .HasForeignKey("MusicId");

                    b.HasOne("EventsProject.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });

            modelBuilder.Entity("EventsProject.Sport", b =>
                {
                    b.HasOne("EventsProject.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");
                });

            modelBuilder.Entity("EventsProject.SportEvent", b =>
                {
                    b.HasOne("EventsProject.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");

                    b.HasOne("EventsProject.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId");
                });
#pragma warning restore 612, 618
        }
    }
}
